openapi: 3.0.0
info:
  title: Comics API
  description: API for managing comics, pages, and images with user authentication
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        login:
          type: string
          example: "user123"
        name:
          type: string
          example: "John Doe"
        password:
          type: string
          example: "securepassword123"
    AuthResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
        name:
          type: string
        token:
          type: string
          description: JWT token for authentication
    Comic:
      type: object
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
        description:
          type: string
        creator:
          type: string
          format: uuid
        pages:
          type: array
          items:
            $ref: '#/components/schemas/Page'
    Page:
      type: object
      properties:
        pageId:
          type: string
          format: uuid
        comicsId:
          type: string
          format: uuid
        number:
          type: integer
        rows:
          type: integer
        columns:
          type: integer
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cellIndex:
          type: integer
        image:
          type: string
          format: byte
          description: Base64 encoded image
    Error:
      type: object
      properties:
        message:
          type: string
        details:
          type: string
        error:
          type: string

paths:
  /api/user/auth:
    post:
      tags:
        - Authentication
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
              required:
                - login
                - password
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Missing login or password
        '401':
          description: Invalid credentials
        '404':
          description: User not found
        '500':
          description: Authentication failed

  /api/user/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
                name:
                  type: string
              required:
                - login
                - password
                - name
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  login:
                    type: string
                  token:
                    type: string
        '400':
          description: Missing required fields
        '409':
          description: User already exists
        '500':
          description: Registration failed

  /api/user:
    get:
      tags:
        - User
      summary: Get current user info
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/User'
        '401':
          description: Not authorized

  /api/comics:
    get:
      tags:
        - Comics
      summary: Get all comics
      responses:
        '200':
          description: List of comics
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comic'
        '500':
          description: Server error
    post:
      tags:
        - Comics
      summary: Create new comic
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comic:
                  $ref: '#/components/schemas/Comic'
                pages:
                  type: array
                  items:
                    $ref: '#/components/schemas/Page'
              required:
                - comic
                - pages
      responses:
        '200':
          description: Comic created successfully
        '400':
          description: Invalid input
        '401':
          description: Not authorized
        '500':
          description: Server error

  /api/comics/{id}:
    get:
      tags:
        - Comics
      summary: Get comic by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comic details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  comic:
                    $ref: '#/components/schemas/Comic'
        '404':
          description: Comic not found
        '500':
          description: Server error
    put:
      tags:
        - Comics
      summary: Update comic
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comic:
                  $ref: '#/components/schemas/Comic'
                pages:
                  type: array
                  items:
                    $ref: '#/components/schemas/Page'
              required:
                - comic
                - pages
      responses:
        '200':
          description: Comic updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid input
        '401':
          description: Not authorized
        '403':
          description: Not enough permissions
        '404':
          description: Comic not found
        '500':
          description: Server error
    delete:
      tags:
        - Comics
      summary: Delete comic
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comic deleted successfully
        '401':
          description: Not authorized
        '403':
          description: Not enough permissions
        '404':
          description: Comic not found
        '500':
          description: Server error

  /health:
    get:
      tags:
        - System
      summary: Health check
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  database:
                    type: string
        '500':
          description: System is not healthy